@inject HttpClient Http;
@inject GameState GameState;
@using System.Text.Json;
@using BattleShip.Models;
@using System.Text
@using BattleShip.Models.Response

<table class="board-table">
    <thead>
    <tr>
        <th></th>
        @for (var i = 1; i <= 10; i++)
        {
            var ii = i;
            <th>@ii</th>
        }
    </tr>
    </thead>
    <tbody>
    @for (var row = 'A'; row <= 'J'; row++)
    {
        <tr>
            <td>@row</td>
            @for (var col = 0; col <= 9; col++)
            {
                var currentCol = col;
                var currentRow = row;
                var cell = Table[col, (int)row - 'A'];
                switch (cell)
                {
                    case 'X':
                        <td style="background-color: red" @onclick="() => CellClicked(currentRow, currentCol)">X</td>
                        break;
                    case 'O':
                        <td @onclick="() => CellClicked(currentRow, currentCol)">X</td>
                        break;
                    default:
                        <td style="background-color: white" @onclick="() => CellClicked(currentRow, currentCol)"></td>
                        break;
                }
            }
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter] public char[,] Table { get; set; }
    [Parameter]
    public EventCallback<(AttackResponse UserResult, int col, int row)> OnUpdate { get; set; }

    private async Task CellClicked(char row, int col)
    {
        Console.WriteLine($"Cell {row}{col} was clicked");
        using StringContent jsonContent = new(
            JsonSerializer.Serialize(new AttackRequest(GameState.GameId,
                GameState.PlayerId,
                 col,
                (int)row - 'A')),
            Encoding.UTF8,
            "application/json");

        var response = await Http.PostAsync("http://localhost:5143/attack", jsonContent);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadFromJsonAsync<AttackResponse>();
            Console.WriteLine(content);
            //TODO afficher historique de l'action
            if (OnUpdate.HasDelegate)
            {
                await OnUpdate.InvokeAsync((content, col, (int)row - 'A'));
            }
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }

}