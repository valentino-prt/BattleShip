@page "/"
@using System.Text.Json
@using BattleShip.Models
@using BattleShip.Models.Requests
@using BattleShip.Models.Responses
@using System.Text
@inject HttpClient Http;
@inject NavigationManager navigationManager


<h1>Welcome to BattleShip!</h1>
<div class="div-menu">
    <button @onclick="ToggleDropdown" class="menu-button">Create a new game</button>
    @if (showDropdown)
    {
        <div class="dropdown-menu">
            <button class="dropdown-item" @onclick="CreateGameIa">IA</button>
        </div>
    }
    <button @onclick="JoinGame" class="menu-button">Join a game</button>
    @if (showJoinGame)
    {
        <div class="dropdown-menu">
            <input type="text" placeholder="Enter the game code"/>
            <button class="dropdown-item">Join</button>
        </div>
    }
</div>

@code {
    private bool showDropdown;
    private bool showJoinGame;

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }

    private async Task CreateGameIa()
    {
        var playerId = Guid.NewGuid();
        using StringContent jsonContent = new(
            JsonSerializer.Serialize(new InitializeGameRequest(playerId, new GameSettings(GameMode.SoloVsAi, AiDifficulty.Easy))),
            Encoding.UTF8,
            "application/json");

        var response = await Http.PostAsync("/games", jsonContent);

        if (response.IsSuccessStatusCode)
        {
            var gameInfo = await response.Content.ReadFromJsonAsync<InitializeGameResponse>();
            var playerBoard = new char[10, 10];
            foreach (var Ship in gameInfo.Ships)
            {
                switch (Ship.Direction)
                {
                    case Direction.Horizontal:
                        for (var i = 0; i < Ship.Length; i++)
                        {
                            playerBoard[Ship.X + i, Ship.Y] = Ship.Type.ToString().Substring(0, 1)[0];
                        }

                        break;
                    case Direction.Vertical:
                        for (var i = 0; i < Ship.Length; i++)
                        {
                            playerBoard[Ship.X, Ship.Y + i] = Ship.Type.ToString().Substring(0, 1)[0];
                        }

                        break;
                    default:
                        return;
                }
            }

            GameState.InitializeInstance(gameInfo.SessionId, playerBoard, new char[10, 10], playerId);
            navigationManager.NavigateTo("/home");
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }

    private async Task JoinGame()
    {
        showJoinGame = !showJoinGame;
    }

}